{"ast":null,"code":"var _jsxFileName = \"/home/harshith/Documents/Programs/human-benchmark/frontend/src/pages/SequenceMemory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './SequenceMemory.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SequenceMemory = () => {\n  _s();\n  const [level, setLevel] = useState(1);\n  const [sequence, setSequence] = useState([]);\n  const [userInput, setUserInput] = useState([]);\n  const [isDisplayingSequence, setIsDisplayingSequence] = useState(false);\n  const [currentHighlight, setCurrentHighlight] = useState(null);\n  const [userHighlight, setUserHighlight] = useState(null);\n  const [showResult, setShowResult] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    if (level === 1) {\n      generateInitialSequence();\n    } else {\n      extendSequence();\n    }\n  }, [level]);\n  const generateInitialSequence = () => {\n    const newSequence = [Math.floor(Math.random() * 9)];\n    setSequence(newSequence);\n    displaySequence(newSequence);\n  };\n  const extendSequence = () => {\n    const nextNumber = Math.floor(Math.random() * 9);\n    const newSequence = [...sequence, nextNumber];\n    setSequence(newSequence);\n    displaySequence(newSequence);\n  };\n  const displaySequence = async sequence => {\n    setIsDisplayingSequence(true);\n    for (let i = 0; i < sequence.length; i++) {\n      setCurrentHighlight(sequence[i]);\n      await wait(300);\n      setCurrentHighlight(null);\n      await wait(100);\n    }\n    setIsDisplayingSequence(false);\n  };\n  const wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n  const handleCellClick = index => {\n    if (isDisplayingSequence || showResult || gameOver) return;\n    setUserHighlight(index);\n    setTimeout(() => setUserHighlight(null), 200);\n    const updatedUserInput = [...userInput, index];\n    setUserInput(updatedUserInput);\n    if (updatedUserInput.length === sequence.length) {\n      if (JSON.stringify(updatedUserInput) === JSON.stringify(sequence)) {\n        setShowResult(true);\n      } else {\n        setShowResult(true);\n      }\n    }\n  };\n  const nextLevel = () => {\n    setShowResult(false);\n    setUserInput([]);\n    if (level < 20) {\n      setLevel(level + 1);\n    } else {\n      setGameOver(true);\n    }\n  };\n  const restartGame = () => {\n    setLevel(1);\n    setSequence([]);\n    setUserInput([]);\n    setGameOver(false);\n    setShowResult(false);\n    generateInitialSequence();\n  };\n  const renderCell = index => {\n    const isHighlighted = index === currentHighlight;\n    const isUserClicked = index === userHighlight;\n    const cellClass = `cell ${isHighlighted ? 'highlighted' : ''} ${isUserClicked ? 'clicked' : ''}`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cellClass,\n      onClick: () => handleCellClick(index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sequence Memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"You Win!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restartGame,\n        className: \"button\",\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Level: \", level]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: Array.from({\n          length: 9\n        }).map((_, index) => renderCell(index))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), showResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Your Input: \", userInput.join(\",\"), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 67\n          }, this), \"Correct Sequence: \", sequence.join(\",\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 29\n        }, this), JSON.stringify(userInput) === JSON.stringify(sequence) ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: nextLevel,\n          className: \"button\",\n          children: \"Next Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartGame,\n          className: \"button\",\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(SequenceMemory, \"aJYmLvueUdFdXlLmA9ztN3LBlZI=\");\n_c = SequenceMemory;\nexport default SequenceMemory;\nvar _c;\n$RefreshReg$(_c, \"SequenceMemory\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SequenceMemory","_s","level","setLevel","sequence","setSequence","userInput","setUserInput","isDisplayingSequence","setIsDisplayingSequence","currentHighlight","setCurrentHighlight","userHighlight","setUserHighlight","showResult","setShowResult","gameOver","setGameOver","generateInitialSequence","extendSequence","newSequence","Math","floor","random","displaySequence","nextNumber","i","length","wait","ms","Promise","resolve","setTimeout","handleCellClick","index","updatedUserInput","JSON","stringify","nextLevel","restartGame","renderCell","isHighlighted","isUserClicked","cellClass","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","children","Array","from","map","_","join","_c","$RefreshReg$"],"sources":["/home/harshith/Documents/Programs/human-benchmark/frontend/src/pages/SequenceMemory.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './SequenceMemory.css';\n\nconst SequenceMemory = () => {\n    const [level, setLevel] = useState(1);\n    const [sequence, setSequence] = useState([]);\n    const [userInput, setUserInput] = useState([]);\n    const [isDisplayingSequence, setIsDisplayingSequence] = useState(false);\n    const [currentHighlight, setCurrentHighlight] = useState(null);\n    const [userHighlight, setUserHighlight] = useState(null);\n    const [showResult, setShowResult] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n\n    useEffect(() => {\n        if (level === 1) {\n            generateInitialSequence();\n        } else {\n            extendSequence();\n        }\n    }, [level]);\n\n    const generateInitialSequence = () => {\n        const newSequence = [Math.floor(Math.random() * 9)];\n        setSequence(newSequence);\n        displaySequence(newSequence);\n    };\n\n    const extendSequence = () => {\n        const nextNumber = Math.floor(Math.random() * 9);\n        const newSequence = [...sequence, nextNumber];\n        setSequence(newSequence);\n        displaySequence(newSequence);\n    };\n\n    const displaySequence = async (sequence) => {\n        setIsDisplayingSequence(true);\n        for (let i = 0; i < sequence.length; i++) {\n            setCurrentHighlight(sequence[i]);\n            await wait(300);\n            setCurrentHighlight(null);\n            await wait(100);\n        }\n        setIsDisplayingSequence(false);\n    };\n\n    const wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n    const handleCellClick = (index) => {\n        if (isDisplayingSequence || showResult || gameOver) return;\n\n        setUserHighlight(index);\n        setTimeout(() => setUserHighlight(null), 200);\n\n        const updatedUserInput = [...userInput, index];\n        setUserInput(updatedUserInput);\n\n        if (updatedUserInput.length === sequence.length) {\n            if (JSON.stringify(updatedUserInput) === JSON.stringify(sequence)) {\n                setShowResult(true);\n            } else {\n                setShowResult(true);\n            }\n        }\n    };\n\n    const nextLevel = () => {\n        setShowResult(false);\n        setUserInput([]);\n        if (level < 20) {\n            setLevel(level + 1);\n        } else {\n            setGameOver(true);\n        }\n    };\n\n    const restartGame = () => {\n        setLevel(1);\n        setSequence([]);\n        setUserInput([]);\n        setGameOver(false);\n        setShowResult(false);\n        generateInitialSequence();\n    };\n\n    const renderCell = (index) => {\n        const isHighlighted = index === currentHighlight;\n        const isUserClicked = index === userHighlight;\n        const cellClass = `cell ${isHighlighted ? 'highlighted' : ''} ${isUserClicked ? 'clicked' : ''}`;\n        return (\n            <div\n                key={index}\n                className={cellClass}\n                onClick={() => handleCellClick(index)}\n            ></div>\n        );\n    };\n\n    return (\n        <div className=\"container\">\n            <h1>Sequence Memory</h1>\n            {gameOver ? (\n                <div>\n                    <h2>You Win!</h2>\n                    <button onClick={restartGame} className=\"button\">\n                        Play Again\n                    </button>\n                </div>\n            ) : (\n                <div>\n                    <h2>Level: {level}</h2>\n                    <div className=\"grid\">\n                        {Array.from({ length: 9 }).map((_, index) => renderCell(index))}\n                    </div>\n                    {showResult && (\n                        <div>\n                            <p>\n                                Your Input: {userInput.join(\",\")} <br />\n                                Correct Sequence: {sequence.join(\",\")}\n                            </p>\n                            {JSON.stringify(userInput) === JSON.stringify(sequence) ? (\n                                <button onClick={nextLevel} className=\"button\">\n                                    Next Level\n                                </button>\n                            ) : (\n                                <button onClick={restartGame} className=\"button\">\n                                    Restart\n                                </button>\n                            )}\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SequenceMemory;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}